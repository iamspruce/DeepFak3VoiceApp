name: Build and Release Signed Executables

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-macos:
    name: Build and Sign macOS Universal DMG
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: brew install portaudio

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt

      - name: Build with PyInstaller for Universal2
        run: |
          pyinstaller --onedir --windowed --name DeepFak3rVoice --icon app.icns --add-data 'out:out' --target-arch universal2 main.py

      - name: Sign macOS App
        run: |
          # Decode and save the certificate
          echo "${{ secrets.SIGNING_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.pfx

          # Create a temporary keychain
          security create-keychain -p "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import the certificate
          security import certificate.pfx -k build.keychain -P "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security

          # Grant access
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" build.keychain

          # List available identities for debugging
          echo "Available signing identities:"
          security find-identity -v -p codesigning build.keychain

          # Get the common name directly
          IDENTITY=$(security find-identity -v -p codesigning build.keychain | head -n 1 | sed -n 's/.*) \(.*\) ".*/\1/p')

          echo "Using identity: $IDENTITY"

          # Sign with the identity (or use - for ad-hoc if empty)
          if [ -z "$IDENTITY" ]; then
            echo "No certificate found, using ad-hoc signing"
            codesign --force --deep --sign - "dist/DeepFak3rVoice.app"
          else
            codesign --force --deep --sign "$IDENTITY" --options runtime --timestamp "dist/DeepFak3rVoice.app"
          fi

          # Verify
          codesign --verify --verbose=4 "dist/DeepFak3rVoice.app"

          # Clean up
          rm -f certificate.pfx
          security delete-keychain build.keychain
        env:
          SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create DMG
        run: |
          mkdir -p dist/dmg
          cp -r dist/DeepFak3rVoice.app dist/dmg/
          create-dmg \
            --volname "DeepFak3rVoice" \
            --volicon "app.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "DeepFak3rVoice.app" 175 120 \
            --hide-extension "DeepFak3rVoice.app" \
            --app-drop-link 425 120 \
            "dist/DeepFak3rVoice-universal.dmg" \
            "dist/dmg/"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/DeepFak3rVoice-universal.dmg
          asset_name: DeepFak3rVoice-macOS-universal.dmg
          asset_content_type: application/octet-stream

  build-windows:
    name: Build and Sign Windows Installer
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --onedir --windowed --name DeepFak3rVoice --icon app.ico --add-data "out;out" main.py

      - name: Sign Windows Executable
        run: |
          $cert_pfx_path = "certificate.pfx"
          [IO.File]::WriteAllBytes($cert_pfx_path, [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERTIFICATE_BASE64 }}"))

          $sdk_dir = (Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Filter "signtool.exe" -Recurse | Select-Object -Last 1).DirectoryName
          $signtool_path = Join-Path $sdk_dir "signtool.exe"

          & $signtool_path sign /f $cert_pfx_path /p "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "dist/DeepFak3rVoice/DeepFak3rVoice.exe"
        shell: pwsh
        env:
          SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}

      - name: Create Inno Setup Script
        run: |
          @"
          #define MyAppName "DeepFak3rVoice"
          #define MyAppVersion "${{ github.ref_name }}"
          #define MyAppPublisher "Your Company Name"
          #define MyAppExeName "DeepFak3rVoice.exe"

          [Setup]
          AppId={{YOUR-GUID-HERE}
          AppName={#MyAppName}
          AppVersion={#MyAppVersion}
          AppPublisher={#MyAppPublisher}
          DefaultDirName={autopf}\{#MyAppName}
          DefaultGroupName={#MyAppName}
          AllowNoIcons=yes
          OutputDir=installer
          OutputBaseFilename=DeepFak3rVoice-Setup
          Compression=lzma
          SolidCompression=yes
          WizardStyle=modern
          SetupIconFile=app.ico
          UninstallDisplayIcon={app}\{#MyAppExeName}
          ArchitecturesInstallIn64BitMode=x64

          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

          [Files]
          Source: "dist\DeepFak3rVoice\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
          Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

          [Run]
          Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
          "@ | Out-File -FilePath setup.iss -Encoding UTF8
        shell: pwsh

      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Build Installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup.iss
        shell: pwsh

      - name: Sign Installer
        run: |
          $cert_pfx_path = "certificate.pfx"
          [IO.File]::WriteAllBytes($cert_pfx_path, [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERTIFICATE_BASE64 }}"))

          $sdk_dir = (Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Filter "signtool.exe" -Recurse | Select-Object -Last 1).DirectoryName
          $signtool_path = Join-Path $sdk_dir "signtool.exe"

          & $signtool_path sign /f $cert_pfx_path /p "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "installer/DeepFak3rVoice-Setup.exe"

          Remove-Item $cert_pfx_path
        shell: pwsh
        env:
          SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: installer/DeepFak3rVoice-Setup.exe
          asset_name: DeepFak3rVoice-Windows-Setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  build-linux:
    name: Build Linux AppImage
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev libfuse2 file

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --onedir --name DeepFak3rVoice --add-data 'out:out' main.py

      - name: Download appimagetool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          # Copy the application
          cp -r dist/DeepFak3rVoice/* AppDir/usr/bin/

          # Copy the PNG icon
          cp app.png AppDir/usr/share/icons/hicolor/256x256/apps/deepfak3rvoice.png

          # Create desktop entry
          cat > AppDir/usr/share/applications/deepfak3rvoice.desktop << 'EOF'
          [Desktop Entry]
          Name=DeepFak3rVoice
          Exec=DeepFak3rVoice
          Icon=deepfak3rvoice
          Type=Application
          Categories=Audio;AudioVideo;
          Comment=Voice manipulation application
          Terminal=false
          EOF

          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin/:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib/:${LD_LIBRARY_PATH}"
          cd "${HERE}/usr/bin"
          exec ./DeepFak3rVoice "$@"
          EOF

          chmod +x AppDir/AppRun

          # Copy desktop file and icon to root of AppDir
          cp AppDir/usr/share/applications/deepfak3rvoice.desktop AppDir/
          cp AppDir/usr/share/icons/hicolor/256x256/apps/deepfak3rvoice.png AppDir/deepfak3rvoice.png

      - name: Build AppImage
        run: |
          ARCH=x86_64 ./appimagetool-x86_64.AppImage AppDir DeepFak3rVoice-x86_64.AppImage

      - name: Make AppImage executable
        run: chmod +x DeepFak3rVoice-x86_64.AppImage

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./DeepFak3rVoice-x86_64.AppImage
          asset_name: DeepFak3rVoice-Linux-x86_64.AppImage
          asset_content_type: application/octet-stream
