"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[97],{4501:function(e,t,r){r.d(t,{Vt:function(){return a},hy:function(){return n},qE:function(){return i}});let n={os:"linux",arch:"x64",hasGPU:!1,gpus:[],totalVRAM:0,recommendedSetup:"runpod"};function a(){return new Promise(e=>{let t=0,r=()=>{var n,a;"function"==typeof(null===(a=window.pywebview)||void 0===a?void 0:null===(n=a.api)||void 0===n?void 0:n.detect_hardware)?e(!0):++t>=50?e(!1):setTimeout(r,100)};r()})}async function i(){try{if(!await a())return await o();{let e=await window.pywebview.api.detect_hardware();return console.log("[HardwareDetection] Detected hardware via PyWebView:",e),{os:e.os,arch:e.arch,hasGPU:e.hasGPU,gpus:e.gpus,totalVRAM:e.totalVRAM,recommendedSetup:e.recommendedSetup}}}catch(e){return console.error("[HardwareDetection] Failed to detect hardware via PyWebView:",e),n}}async function o(){let e,t;let r=navigator.userAgent.toLowerCase();e=r.includes("win")?"windows":r.includes("mac")?"macos":"linux";let n="x64";(r.includes("arm")||r.includes("aarch64"))&&(n="arm64");let a=[],i=!1,o=0;try{let e=document.createElement("canvas"),t=e.getContext("webgl")||e.getContext("experimental-webgl");if(t&&"function"==typeof t.getExtension){let e=t.getExtension("WEBGL_debug_renderer_info");if(e){let r=t.getParameter(e.UNMASKED_RENDERER_GL).toLowerCase();console.log("[HardwareDetection] WebGL Renderer:",r),r.includes("nvidia")||r.includes("geforce")?(i=!0,o=8,a.push({vendor:"nvidia",model:"unknown",vramGB:8,isSupported:!0,performanceScore:60})):r.includes("amd")||r.includes("radeon")?(i=!0,o=8,a.push({vendor:"amd",model:"unknown",vramGB:8,isSupported:!0,performanceScore:60})):r.includes("intel")?(i=!0,o=4,a.push({vendor:"intel",model:"unknown",vramGB:4,isSupported:!1,performanceScore:30})):r.includes("apple")&&(i=!0,o=8,a.push({vendor:"apple",model:"unknown",vramGB:8,isSupported:!0,performanceScore:60}))}}}catch(e){console.warn("[HardwareDetection] WebGL GPU detection failed:",e)}return t=i&&o>=12?"local":i&&o>=6?"remote":"runpod",{os:e,arch:n,hasGPU:i,gpus:a,totalVRAM:o,recommendedSetup:t}}},105:function(e,t,r){r.d(t,{C:function(){return a}});class n{async init(){return new Promise((e,t)=>{let r=indexedDB.open(this.dbName,this.version);r.onerror=()=>t(r.error),r.onsuccess=()=>{this.db=r.result,e()},r.onupgradeneeded=e=>{let t=e.target.result;if(!t.objectStoreNames.contains("voices")){let e=t.createObjectStore("voices",{keyPath:"id"});e.createIndex("name","name",{unique:!1}),e.createIndex("createdAt","createdAt",{unique:!1})}if(!t.objectStoreNames.contains("generatedAudios")){let e=t.createObjectStore("generatedAudios",{keyPath:"id"});e.createIndex("voiceId","voiceId",{unique:!1}),e.createIndex("createdAt","createdAt",{unique:!1})}t.objectStoreNames.contains("settings")||t.createObjectStore("settings",{keyPath:"key"})}})}async saveVoice(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,r)=>{let n=this.db.transaction(["voices"],"readwrite").objectStore("voices").put(e);n.onerror=()=>r(n.error),n.onsuccess=()=>t()})}async getVoice(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,r)=>{let n=this.db.transaction(["voices"],"readonly").objectStore("voices").get(e);n.onerror=()=>r(n.error),n.onsuccess=()=>t(n.result||null)})}async getAllVoices(){if(!this.db)throw Error("Database not initialized");return new Promise((e,t)=>{let r=this.db.transaction(["voices"],"readonly").objectStore("voices").getAll();r.onerror=()=>t(r.error),r.onsuccess=()=>e(r.result||[])})}async deleteVoice(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,r)=>{let n=this.db.transaction(["voices"],"readwrite").objectStore("voices").delete(e);n.onerror=()=>r(n.error),n.onsuccess=()=>t()})}async saveGeneratedAudio(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,r)=>{let n=this.db.transaction(["generatedAudios"],"readwrite").objectStore("generatedAudios").put(e);n.onerror=()=>r(n.error),n.onsuccess=()=>t()})}async getAllGeneratedAudios(){if(!this.db)throw Error("Database not initialized");return new Promise((e,t)=>{let r=this.db.transaction(["generatedAudios"],"readonly").objectStore("generatedAudios").getAll();r.onerror=()=>t(r.error),r.onsuccess=()=>e(r.result||[])})}async deleteGeneratedAudio(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,r)=>{let n=this.db.transaction(["generatedAudios"],"readwrite").objectStore("generatedAudios").delete(e);n.onerror=()=>r(n.error),n.onsuccess=()=>t()})}async saveSetting(e,t){if(!this.db)throw Error("Database not initialized");return new Promise((r,n)=>{let a=this.db.transaction(["settings"],"readwrite").objectStore("settings").put({key:e,value:t});a.onerror=()=>n(a.error),a.onsuccess=()=>r()})}async getSetting(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,r)=>{let n=this.db.transaction(["settings"],"readonly").objectStore("settings").get(e);n.onerror=()=>r(n.error),n.onsuccess=()=>{var e;return t((null===(e=n.result)||void 0===e?void 0:e.value)||null)}})}createObjectURL(e){return URL.createObjectURL(e)}revokeObjectURL(e){URL.revokeObjectURL(e)}constructor(){this.db=null,this.dbName="tts-studio",this.version=1}}let a=new n;a.init().catch(console.error)},2682:function(e,t,r){r.d(t,{Yg:function(){return n}});class n{static getInstance(){return n.instance||(n.instance=new n),n.instance}setProgressCallback(e){this.progressCallback=e}async setupLocalServer(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available. Please run this in the desktop app.");try{console.log("[LocalServerManager] Starting local server setup..."),window.pywebview.api.start_local_server_setup()}catch(e){throw console.error("[LocalServerManager] Failed to start setup:",e),Error("Failed to start server setup: ".concat(e))}}async getServerInfo(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available");try{let e=window.pywebview.api.check_local_server();return console.log("[LocalServerManager] Server info:",e),e}catch(e){throw console.error("[LocalServerManager] Failed to get server info:",e),Error("Failed to get server info: ".concat(e))}}async checkInstallation(){try{return(await this.getServerInfo()).isInstalled}catch(e){return console.error("[LocalServerManager] Failed to check installation:",e),!1}}async startServer(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available");try{console.log("[LocalServerManager] Starting local server..."),window.pywebview.api.start_local_server(),this.startStatusPolling()}catch(e){throw console.error("[LocalServerManager] Failed to start server:",e),Error("Failed to start server: ".concat(e))}}async stopServer(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available");try{console.log("[LocalServerManager] Stopping local server..."),window.pywebview.api.stop_local_server(),this.stopStatusPolling()}catch(e){throw console.error("[LocalServerManager] Failed to stop server:",e),Error("Failed to stop server: ".concat(e))}}getServerUrl(){return"http://localhost:8000"}async cancelSetup(){console.log("[LocalServerManager] Setup cancellation requested")}async downloadAndInstall(){return this.setupLocalServer()}isPyWebViewAvailable(){var e;return!!(null===(e=window.pywebview)||void 0===e?void 0:e.api)}startStatusPolling(){this.stopStatusPolling(),this.pollInterval=setInterval(async()=>{try{await this.getServerInfo()}catch(e){console.warn("[LocalServerManager] Status poll failed:",e)}},3e3)}stopStatusPolling(){this.pollInterval&&(clearInterval(this.pollInterval),this.pollInterval=void 0)}static async create(e,t){return n.getInstance()}constructor(){window.dispatchLocalServerProgress=e=>{var t;console.log("[LocalServerManager] Received progress from Python:",e),null===(t=this.progressCallback)||void 0===t||t.call(this,e)}}}},9782:function(e,t,r){r.d(t,{RunPodManager:function(){return i}});class n{async graphqlRequest(e,t){let r=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.apiKey)},body:JSON.stringify({query:e,variables:t})});if(!r.ok)throw Error("RunPod API error: ".concat(r.statusText));let n=await r.json();if(n.errors)throw Error("RunPod GraphQL error: ".concat(n.errors[0].message));return n.data}async validateApiKey(){try{return await this.graphqlRequest("\n        query {\n          myself {\n            id\n            email\n            credits\n          }\n        }\n      "),!0}catch(e){return console.error("[v0] RunPod API key validation failed:",e),!1}}async getGpuTypes(){return(await this.graphqlRequest("\n      query {\n        gpuTypes {\n          id\n          displayName\n          memoryInGb\n          secureCloud\n          communityCloud\n          lowestPrice(input: { gpuCount: 1 }) {\n            minimumBidPrice\n            uninterruptablePrice\n          }\n          stockStatus\n        }\n      }\n    ")).gpuTypes}async createPod(e){let t={input:{cloudType:"SECURE",gpuCount:1,volumeInGb:e.volumeInGb,containerDiskInGb:e.containerDiskInGb,minVcpuCount:4,minMemoryInGb:16,gpuTypeId:e.gpuTypeId,name:e.name,imageName:e.imageName,dockerArgs:"",ports:e.ports,volumeMountPath:"/workspace",env:e.env}};return(await this.graphqlRequest("\n      mutation createPod($input: PodFindAndDeployOnDemandInput!) {\n        podFindAndDeployOnDemand(input: $input) {\n          id\n          name\n          runtime {\n            uptimeInSeconds\n            ports {\n              ip\n              isIpPublic\n              privatePort\n              publicPort\n              type\n            }\n            gpus {\n              id\n              gpuUtilPercent\n              memoryUtilPercent\n            }\n          }\n          machine {\n            podHostId\n          }\n        }\n      }\n    ",t)).podFindAndDeployOnDemand}async getPod(e){return(await this.graphqlRequest("\n      query getPod($input: PodInput!) {\n        pod(input: $input) {\n          id\n          name\n          runtime {\n            uptimeInSeconds\n            ports {\n              ip\n              isIpPublic\n              privatePort\n              publicPort\n              type\n            }\n            gpus {\n              id\n              gpuUtilPercent\n              memoryUtilPercent\n            }\n          }\n          machine {\n            podHostId\n          }\n        }\n      }\n    ",{input:{podId:e}})).pod}async terminatePod(e){return(await this.graphqlRequest("\n      mutation terminatePod($input: PodTerminateInput!) {\n        podTerminate(input: $input) {\n          id\n        }\n      }\n    ",{input:{podId:e}})).podTerminate}async stopPod(e){return(await this.graphqlRequest("\n      mutation stopPod($input: PodStopInput!) {\n        podStop(input: $input) {\n          id\n        }\n      }\n    ",{input:{podId:e}})).podStop}async resumePod(e){return(await this.graphqlRequest("\n      mutation resumePod($input: PodResumeInput!) {\n        podResume(input: $input) {\n          id\n        }\n      }\n    ",{input:{podId:e}})).podResume}async getMyPods(){return(await this.graphqlRequest("\n      query getMyPods {\n        myself {\n          pods {\n            id\n            name\n            runtime {\n              uptimeInSeconds\n              ports {\n                ip\n                isIpPublic\n                privatePort\n                publicPort\n                type\n              }\n            }\n            machine {\n              podHostId\n            }\n          }\n        }\n      }\n    ")).myself.pods}constructor(e){this.baseUrl="https://api.runpod.ai/graphql",this.apiKey=e}}let a={dockerImage:"spruceemma/vibevoice-server:latest"};class i{async withRetry(e){let t;for(let r=1;r<=i.MAX_RETRIES;r++)try{return await e()}catch(e){t=e,r<i.MAX_RETRIES&&(console.warn("Attempt ".concat(r," failed, retrying in ").concat(i.RETRY_DELAY,"ms:"),e),await new Promise(e=>setTimeout(e,i.RETRY_DELAY*r)))}throw t}async ensureGpuTypesLoaded(){if(!(this.gpuTypeMap.size>0))for(let e of(await this.api.getGpuTypes()))this.gpuTypeMap.set(e.id,e)}setProgressCallback(e){this.progressCallback=e}updateProgress(e){var t;console.log("[v0] RunPod deployment progress:",e),null===(t=this.progressCallback)||void 0===t||t.call(this,e)}async validateApiKey(){return await this.withRetry(async()=>await this.api.validateApiKey())}async getAvailableGPUs(){return(await this.api.getGpuTypes()).filter(e=>e.memoryInGb>=24&&e.secureCloud&&"OUT_OF_STOCK"!==e.stockStatus).sort((e,t)=>{var r,n;return((null===(r=e.lowestPrice)||void 0===r?void 0:r.uninterruptablePrice)||1/0)-((null===(n=t.lowestPrice)||void 0===n?void 0:n.uninterruptablePrice)||1/0)})}selectOptimalGPU(e){return e.reduce((e,t)=>{let r=this.calculateGPUScore(e);return this.calculateGPUScore(t)>r?t:e},e[0])}calculateGPUScore(e){var t;let r=e.memoryInGb/24;return 1/((null===(t=e.lowestPrice)||void 0===t?void 0:t.uninterruptablePrice)||1)*r*("HIGH"===e.stockStatus?1.2:"MEDIUM"===e.stockStatus?1:.8)}async deployTTSServer(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"tts-server";return this.withRetry(async()=>{try{if(this.updateProgress({stage:"validating",progress:10,message:"Validating API key and credits..."}),!await this.validateApiKey())throw Error("Invalid RunPod API key or insufficient credits");this.updateProgress({stage:"validating",progress:20,message:"Finding available GPUs..."});let t=await this.getAvailableGPUs();if(0===t.length)throw Error("No suitable GPU types available (24GB+ VRAM required)");let r=this.selectOptimalGPU(t);this.updateProgress({stage:"creating",progress:40,message:"Deploying on ".concat(r.displayName,"...")});let n=await this.api.createPod({name:e,imageName:a.dockerImage,gpuTypeId:r.id,containerDiskInGb:50,volumeInGb:100,ports:"8000/http",env:[{key:"PYTHONUNBUFFERED",value:"1"},{key:"TTS_SERVER_PORT",value:"8000"},{key:"TTS_SERVER_HOST",value:"0.0.0.0"},{key:"TTS_SERVER_WORKERS",value:"2"},{key:"CUDA_VISIBLE_DEVICES",value:"0"}]}),i=await this.waitForServerReady(n.id);return this.updateProgress({stage:"ready",progress:100,message:"Server is ready and responding!",podId:n.id}),{podId:n.id,url:i}}catch(e){throw this.updateProgress({stage:"error",progress:0,message:"Deployment failed",error:e instanceof Error?e.message:"Unknown error"}),e}})}async waitForServerReady(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3e5,r=Date.now(),n=0;for(;Date.now()-r<t;){n++;try{let t=await this.getTTSServerUrl(e);if(t&&await this.testServerHealthWithRetry(t))return t}catch(e){console.warn("Health check attempt ".concat(n," failed:"),e)}let t=Math.min(60+2*n,95);this.updateProgress({stage:"starting",progress:t,message:"Waiting for server to be ready... (".concat(n,"/60)"),podId:e}),await new Promise(e=>setTimeout(e,5e3))}throw Error("Server failed to become ready within timeout period")}async testServerHealthWithRetry(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;for(let r=0;r<t;r++)try{let t=await fetch("".concat(e,"/health"),{method:"GET",timeout:1e4,headers:{Accept:"application/json"}});if(t.ok){let e=await t.json();return"healthy"===e.status||!0===e.model_loaded}}catch(e){if(r===t-1)throw e;await new Promise(e=>setTimeout(e,2e3))}return!1}async getTTSServerUrl(e){var t;let r=await this.api.getPod(e);if(!(null===(t=r.runtime)||void 0===t?void 0:t.ports))return null;let n=r.runtime.ports.find(e=>8e3===e.privatePort&&e.isIpPublic);return n?"https://".concat(n.ip,":").concat(n.publicPort):null}async getInstanceInfo(e){try{var t,r,n,a,i;await this.ensureGpuTypesLoaded();let o=await this.api.getPod(e);if(!o)return null;let s=o.gpuTypeId||"fallback-id",l=this.gpuTypeMap.get(s)||{displayName:"Unknown",memoryInGb:24},c=null===(r=o.runtime)||void 0===r?void 0:null===(t=r.ports)||void 0===t?void 0:t.find(e=>8e3===e.privatePort);return{id:o.id,name:o.name,status:o.runtime?"RUNNING":"STOPPED",gpuType:l.displayName,vramGB:l.memoryInGb,publicIp:null==c?void 0:c.ip,ports:(null===(a=o.runtime)||void 0===a?void 0:null===(n=a.ports)||void 0===n?void 0:n.map(e=>({internal:e.privatePort,external:e.publicPort})))||[],createdAt:o.createdAt||new Date().toISOString(),uptime:null===(i=o.runtime)||void 0===i?void 0:i.uptimeInSeconds,costPerHour:o.costPerHour}}catch(e){return console.error("[v0] Failed to get instance info:",e),null}}async stopInstance(e){await this.api.stopPod(e)}async resumeInstance(e){await this.api.resumePod(e)}async terminateInstance(e){await this.api.terminatePod(e)}async listMyInstances(){try{return await this.ensureGpuTypesLoaded(),(await this.api.getMyPods()).map(e=>{var t,r,n,a,i,o;let s=e.gpuTypeId||"fallback-id",l=this.gpuTypeMap.get(s)||{displayName:"Unknown",memoryInGb:24};return{id:e.id,name:e.name,status:e.runtime?"RUNNING":"STOPPED",gpuType:l.displayName,vramGB:l.memoryInGb,publicIp:null===(n=e.runtime)||void 0===n?void 0:null===(r=n.ports)||void 0===r?void 0:null===(t=r[0])||void 0===t?void 0:t.ip,ports:(null===(i=e.runtime)||void 0===i?void 0:null===(a=i.ports)||void 0===a?void 0:a.map(e=>({internal:e.privatePort,external:e.publicPort})))||[],createdAt:e.createdAt||new Date().toISOString(),uptime:null===(o=e.runtime)||void 0===o?void 0:o.uptimeInSeconds,costPerHour:e.costPerHour}})}catch(e){return console.error("[v0] Failed to list instances:",e),[]}}constructor(e){this.gpuTypeMap=new Map,this.api=new n(e)}}i.MAX_RETRIES=3,i.RETRY_DELAY=2e3},2097:function(e,t,r){r.d(t,{m:function(){return u}});var n=r(3011),a=r(105),i=r(9782),o=r(2682),s=r(4501);let l=async e=>{let t=e.mainAudio?new Blob([await e.mainAudio.arrayBuffer()]):null,r=await Promise.all(e.emotions.map(async e=>({id:e.id,name:e.name,audioBlob:e.audioFile?new Blob([await e.audioFile.arrayBuffer()]):null})));return{id:e.id,name:e.name,mainAudioBlob:t,emotions:r,createdAt:e.createdAt}},c=e=>({id:e.id,name:e.name,mainAudio:null,mainAudioUrl:e.mainAudioBlob?a.C.createObjectURL(e.mainAudioBlob):null,emotions:e.emotions.map(e=>({id:e.id,name:e.name,audioFile:null,audioUrl:e.audioBlob?a.C.createObjectURL(e.audioBlob):null})),createdAt:e.createdAt}),d=e=>({hasGPU:e.hasGPU,vramGB:e.totalVRAM,os:e.os,arch:e.arch,isChecking:!1,gpus:e.gpus,totalVRAM:e.totalVRAM,recommendedSetup:e.recommendedSetup,detectionTimestamp:new Date}),u=(0,n.U)((e,t)=>({licenseKey:null,licenseStatus:null,licenseLastChecked:null,isServerSetupComplete:!1,serverSetupStep:"license-input",voices:[],generatedAudios:[],currentText:"",selectedVoiceId:null,selectedEmotionId:null,isProcessing:!1,isLoading:!0,serverConfig:null,hardwareInfo:d(s.hy),initializeStore:async()=>{try{let r;await a.C.init();let n=await a.C.getSetting("licenseKey"),i=await a.C.getSetting("licenseStatus"),o=await a.C.getSetting("licenseLastChecked"),s=(await a.C.getAllVoices()).map(c),l=(await a.C.getAllGeneratedAudios()).map(e=>({id:e.id,text:e.text,voiceId:e.voiceId,emotionId:e.emotionId,audioUrl:a.C.createObjectURL(e.audioBlob),createdAt:e.createdAt})),d=await a.C.getSetting("currentText")||"",u=await a.C.getSetting("selectedVoiceId"),p=await a.C.getSetting("selectedEmotionId"),v=await a.C.getSetting("serverConfig"),h=v?JSON.parse(v):null,w=await a.C.getSetting("hardwareInfo");w?r=JSON.parse(w):(await t().checkHardware(),r=t().hardwareInfo);let m=!!h&&"online"===h.status;e({voices:s,generatedAudios:l,currentText:d,selectedVoiceId:u,selectedEmotionId:p,serverConfig:h,hardwareInfo:r,isServerSetupComplete:m,serverSetupStep:m?"complete":"license-input",licenseKey:n,licenseStatus:i,licenseLastChecked:o?new Date(o):null,isLoading:!1})}catch(t){console.error("Failed to initialize store:",t),e({isLoading:!1})}},addVoice:async t=>{let r={...t,id:crypto.randomUUID(),createdAt:new Date};try{let t=await l(r);await a.C.saveVoice(t),e(e=>({voices:[...e.voices,r]}))}catch(e){throw console.error("Failed to save voice:",e),e}},updateVoice:async(r,n)=>{let i=t(),o=i.voices.findIndex(e=>e.id===r);if(-1===o)return;let s={...i.voices[o],...n};try{let t=await l(s);await a.C.saveVoice(t),e(e=>({voices:e.voices.map(e=>e.id===r?s:e)}))}catch(e){throw console.error("Failed to update voice:",e),e}},deleteVoice:async r=>{try{await a.C.deleteVoice(r),e(e=>({voices:e.voices.filter(e=>e.id!==r),selectedVoiceId:e.selectedVoiceId===r?null:e.selectedVoiceId,selectedEmotionId:e.selectedVoiceId===r?null:e.selectedEmotionId}));let n=t();null===n.selectedVoiceId&&(await a.C.saveSetting("selectedVoiceId",null),await a.C.saveSetting("selectedEmotionId",null))}catch(e){throw console.error("Failed to delete voice:",e),e}},addEmotionToVoice:async(r,n)=>{let i={...n,id:crypto.randomUUID()},o=t().voices.find(e=>e.id===r);if(!o)return;let s={...o,emotions:[...o.emotions,i]};try{let t=await l(s);await a.C.saveVoice(t),e(e=>({voices:e.voices.map(e=>e.id===r?s:e)}))}catch(e){throw console.error("Failed to add emotion:",e),e}},removeEmotionFromVoice:async(r,n)=>{let i=t().voices.find(e=>e.id===r);if(!i)return;let o={...i,emotions:i.emotions.filter(e=>e.id!==n)};try{let i=await l(o);await a.C.saveVoice(i),e(e=>({voices:e.voices.map(e=>e.id===r?o:e),selectedEmotionId:e.selectedEmotionId===n?null:e.selectedEmotionId})),null===t().selectedEmotionId&&await a.C.saveSetting("selectedEmotionId",null)}catch(e){throw console.error("Failed to remove emotion:",e),e}},setText:t=>{e({currentText:t}),a.C.saveSetting("currentText",t).catch(console.error)},setSelectedVoice:t=>{e({selectedVoiceId:t,selectedEmotionId:null}),a.C.saveSetting("selectedVoiceId",t).catch(console.error),a.C.saveSetting("selectedEmotionId",null).catch(console.error)},setSelectedEmotion:t=>{e({selectedEmotionId:t}),a.C.saveSetting("selectedEmotionId",t).catch(console.error)},setProcessing:t=>e({isProcessing:t}),addGeneratedAudio:async(t,r)=>{try{if(!t.id||!t.voiceId||!r)throw Error("Invalid audio data");if(0===r.size)throw Error("Audio blob is empty");let n={id:t.id,text:t.text,voiceId:t.voiceId,emotionId:t.emotionId,audioBlob:r,createdAt:t.createdAt};return await a.C.saveGeneratedAudio(n),e(e=>({generatedAudios:[...e.generatedAudios,t]})),!0}catch(e){throw console.error("Failed to save generated audio:",e),e}},removeGeneratedAudio:async t=>{try{await a.C.deleteGeneratedAudio(t),e(e=>({generatedAudios:e.generatedAudios.filter(e=>e.id!==t)}))}catch(e){throw console.error("Failed to delete generated audio:",e),e}},checkHardware:async()=>{e(e=>({hardwareInfo:{...e.hardwareInfo,isChecking:!0}}));let{licenseKey:r}=t();try{let t=await (0,s.qE)(),n=d(t);e({hardwareInfo:n}),r?"local"===t.recommendedSetup?e({serverSetupStep:"server-download"}):"remote"===t.recommendedSetup?e({serverSetupStep:"url-input"}):e({serverSetupStep:"runpod-deploy"}):e({serverSetupStep:"license-input"}),await a.C.saveSetting("hardwareInfo",JSON.stringify(n))}catch(t){console.error("Hardware check failed:",t),e({hardwareInfo:{hasGPU:!1,vramGB:0,os:"linux",arch:"x64",isChecking:!1,gpus:[],totalVRAM:0,recommendedSetup:"runpod",detectionTimestamp:new Date},serverSetupStep:"runpod-deploy"})}},setServerConfig:async t=>{e({serverConfig:t}),await a.C.saveSetting("serverConfig",JSON.stringify(t))},setLicenseKey:async t=>{e({licenseKey:t}),await a.C.saveSetting("licenseKey",t)},verifyLicense:async()=>{let{licenseKey:r,serverConfig:n}=t();if(!r)return e({licenseStatus:"invalid"}),!1;e({licenseStatus:"checking"});try{if(!n)throw Error("Server not configured");let t=new FormData;t.append("license_key",r);let i=await fetch("".concat(n.url,"/verify-license"),{method:"POST",body:t});if(!i.ok)return e({licenseStatus:"invalid"}),await a.C.saveSetting("licenseStatus","invalid"),!1;{let t=await i.json();return e({licenseStatus:t.status,licenseLastChecked:new Date}),await a.C.saveSetting("licenseStatus",t.status),await a.C.saveSetting("licenseLastChecked",new Date().toISOString()),t.valid}}catch(t){return console.error("License verification failed:",t),e({licenseStatus:"invalid"}),!1}},checkServerHealth:async()=>{let{serverConfig:r,licenseKey:n}=t();if(!r)return!1;try{let t=new URL("".concat(r.url,"/health"));n&&t.searchParams.append("license_key",n);let i=await fetch(t.toString(),{method:"GET",timeout:5e3});if(!i.ok){let t={...r,status:"offline",lastChecked:new Date};return e({serverConfig:t}),await a.C.saveSetting("serverConfig",JSON.stringify(t)),!1}let o=await i.json();if(!1===o.license_valid){e({licenseStatus:o.license_status||"invalid"});let t={...r,status:"offline",lastChecked:new Date};return e({serverConfig:t}),await a.C.saveSetting("serverConfig",JSON.stringify(t)),!1}let s="healthy"===o.status;o.license_status&&(e({licenseStatus:o.license_status,licenseLastChecked:new Date}),await a.C.saveSetting("licenseStatus",o.license_status),await a.C.saveSetting("licenseLastChecked",new Date().toISOString()));let l={...r,status:s?"online":"offline",lastChecked:new Date};return e({serverConfig:l}),await a.C.saveSetting("serverConfig",JSON.stringify(l)),s}catch(n){let t={...r,status:"offline",lastChecked:new Date};return e({serverConfig:t}),await a.C.saveSetting("serverConfig",JSON.stringify(t)),!1}},downloadAndStartServer:async r=>{let{hardwareInfo:n}=t();if(!n)throw Error("Hardware info not available");if(!await (0,s.Vt)())throw Error("Cannot setup local server in web environment");e({serverSetupStep:"server-start"});try{let n=o.Yg.getInstance();r&&n.setProgressCallback(r),await n.setupLocalServer();let a={type:"local",url:n.getServerUrl(),status:"checking"};if(await t().setServerConfig(a),await t().checkServerHealth())e({isServerSetupComplete:!0,serverSetupStep:"complete"});else throw Error("Server failed to start properly")}catch(t){throw console.error("Server setup failed:",t),e({serverSetupStep:"url-input"}),t}},deployToRunPod:async(r,n)=>{e({serverSetupStep:"runpod-deploy"});try{var a,o;let l=new i.RunPodManager(r);n&&l.setProgressCallback(n);let c=await l.deployTTSServer("tts-server-"+Date.now());await (0,s.Vt)()&&(null===(o=window.pywebview)||void 0===o?void 0:null===(a=o.api)||void 0===a?void 0:a.set_active_runpod_instance)&&await window.pywebview.api.set_active_runpod_instance(r,c.podId);let d={type:"runpod",url:c.url,status:"checking"};if(await t().setServerConfig(d),await t().checkServerHealth())e({isServerSetupComplete:!0,serverSetupStep:"complete"});else throw Error("RunPod deployment failed to become healthy")}catch(t){throw console.error("RunPod deployment failed:",t),e({serverSetupStep:"url-input"}),t}},getVoiceSampleBlob:async(e,t)=>{let r=await a.C.getVoice(e);if(!r)return null;if(t){let e=r.emotions.find(e=>e.id===t);return(null==e?void 0:e.audioBlob)||null}return r.mainAudioBlob},setServerSetupStep:t=>e({serverSetupStep:t})}))}}]);