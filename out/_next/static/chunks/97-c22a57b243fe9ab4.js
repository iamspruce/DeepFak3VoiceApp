"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[97],{4501:function(e,t,i){i.d(t,{Vt:function(){return a},hy:function(){return r},qE:function(){return n}});let r={os:"linux",arch:"x64",hasGPU:!1,gpus:[],totalVRAM:0,recommendedSetup:"runpod"};function a(){return new Promise(e=>{let t=0,i=()=>{var r,a;"function"==typeof(null===(a=window.pywebview)||void 0===a?void 0:null===(r=a.api)||void 0===r?void 0:r.detect_hardware)?e(!0):++t>=50?e(!1):setTimeout(i,100)};i()})}async function n(){try{if(!await a())return await o();{let e=await window.pywebview.api.detect_hardware();return console.log("[HardwareDetection] Detected hardware via PyWebView:",e),{os:e.os,arch:e.arch,hasGPU:e.hasGPU,gpus:e.gpus,totalVRAM:e.totalVRAM,recommendedSetup:e.recommendedSetup}}}catch(e){return console.error("[HardwareDetection] Failed to detect hardware via PyWebView:",e),r}}async function o(){let e,t;let i=navigator.userAgent.toLowerCase();e=i.includes("win")?"windows":i.includes("mac")?"macos":"linux";let r="x64";(i.includes("arm")||i.includes("aarch64"))&&(r="arm64");let a=[],n=!1,o=0;try{let e=document.createElement("canvas"),t=e.getContext("webgl")||e.getContext("experimental-webgl");if(t&&"function"==typeof t.getExtension){let e=t.getExtension("WEBGL_debug_renderer_info");if(e){let i=t.getParameter(e.UNMASKED_RENDERER_GL).toLowerCase();console.log("[HardwareDetection] WebGL Renderer:",i),i.includes("nvidia")||i.includes("geforce")?(n=!0,o=8,a.push({vendor:"nvidia",model:"unknown",vramGB:8,isSupported:!0,performanceScore:60})):i.includes("amd")||i.includes("radeon")?(n=!0,o=8,a.push({vendor:"amd",model:"unknown",vramGB:8,isSupported:!0,performanceScore:60})):i.includes("intel")?(n=!0,o=4,a.push({vendor:"intel",model:"unknown",vramGB:4,isSupported:!1,performanceScore:30})):i.includes("apple")&&(n=!0,o=8,a.push({vendor:"apple",model:"unknown",vramGB:8,isSupported:!0,performanceScore:60}))}}}catch(e){console.warn("[HardwareDetection] WebGL GPU detection failed:",e)}return t=n&&o>=12?"local":n&&o>=6?"remote":"runpod",{os:e,arch:r,hasGPU:n,gpus:a,totalVRAM:o,recommendedSetup:t}}},105:function(e,t,i){i.d(t,{C:function(){return a}});class r{async init(){return new Promise((e,t)=>{let i=indexedDB.open(this.dbName,this.version);i.onerror=()=>t(i.error),i.onsuccess=()=>{this.db=i.result,e()},i.onupgradeneeded=e=>{let t=e.target.result;if(!t.objectStoreNames.contains("voices")){let e=t.createObjectStore("voices",{keyPath:"id"});e.createIndex("name","name",{unique:!1}),e.createIndex("createdAt","createdAt",{unique:!1})}if(!t.objectStoreNames.contains("generatedAudios")){let e=t.createObjectStore("generatedAudios",{keyPath:"id"});e.createIndex("voiceId","voiceId",{unique:!1}),e.createIndex("createdAt","createdAt",{unique:!1})}t.objectStoreNames.contains("settings")||t.createObjectStore("settings",{keyPath:"key"})}})}async saveVoice(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,i)=>{let r=this.db.transaction(["voices"],"readwrite").objectStore("voices").put(e);r.onerror=()=>i(r.error),r.onsuccess=()=>t()})}async getVoice(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,i)=>{let r=this.db.transaction(["voices"],"readonly").objectStore("voices").get(e);r.onerror=()=>i(r.error),r.onsuccess=()=>t(r.result||null)})}async getAllVoices(){if(!this.db)throw Error("Database not initialized");return new Promise((e,t)=>{let i=this.db.transaction(["voices"],"readonly").objectStore("voices").getAll();i.onerror=()=>t(i.error),i.onsuccess=()=>e(i.result||[])})}async deleteVoice(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,i)=>{let r=this.db.transaction(["voices"],"readwrite").objectStore("voices").delete(e);r.onerror=()=>i(r.error),r.onsuccess=()=>t()})}async saveGeneratedAudio(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,i)=>{let r=this.db.transaction(["generatedAudios"],"readwrite").objectStore("generatedAudios").put(e);r.onerror=()=>i(r.error),r.onsuccess=()=>t()})}async getAllGeneratedAudios(){if(!this.db)throw Error("Database not initialized");return new Promise((e,t)=>{let i=this.db.transaction(["generatedAudios"],"readonly").objectStore("generatedAudios").getAll();i.onerror=()=>t(i.error),i.onsuccess=()=>e(i.result||[])})}async deleteGeneratedAudio(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,i)=>{let r=this.db.transaction(["generatedAudios"],"readwrite").objectStore("generatedAudios").delete(e);r.onerror=()=>i(r.error),r.onsuccess=()=>t()})}async saveSetting(e,t){if(!this.db)throw Error("Database not initialized");return new Promise((i,r)=>{let a=this.db.transaction(["settings"],"readwrite").objectStore("settings").put({key:e,value:t});a.onerror=()=>r(a.error),a.onsuccess=()=>i()})}async getSetting(e){if(!this.db)throw Error("Database not initialized");return new Promise((t,i)=>{let r=this.db.transaction(["settings"],"readonly").objectStore("settings").get(e);r.onerror=()=>i(r.error),r.onsuccess=()=>{var e;return t((null===(e=r.result)||void 0===e?void 0:e.value)||null)}})}createObjectURL(e){return URL.createObjectURL(e)}revokeObjectURL(e){URL.revokeObjectURL(e)}constructor(){this.db=null,this.dbName="tts-studio",this.version=1}}let a=new r;a.init().catch(console.error)},2682:function(e,t,i){i.d(t,{Yg:function(){return r}});class r{static getInstance(){return r.instance||(r.instance=new r),r.instance}setProgressCallback(e){this.progressCallback=e}async setupLocalServer(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available. Please run this in the desktop app.");try{console.log("[LocalServerManager] Starting local server setup..."),window.pywebview.api.start_local_server_setup()}catch(e){throw console.error("[LocalServerManager] Failed to start setup:",e),Error("Failed to start server setup: ".concat(e))}}async getServerInfo(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available");try{let e=window.pywebview.api.check_local_server();return console.log("[LocalServerManager] Server info:",e),e}catch(e){throw console.error("[LocalServerManager] Failed to get server info:",e),Error("Failed to get server info: ".concat(e))}}async checkInstallation(){try{return(await this.getServerInfo()).isInstalled}catch(e){return console.error("[LocalServerManager] Failed to check installation:",e),!1}}async startServer(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available");try{console.log("[LocalServerManager] Starting local server..."),window.pywebview.api.start_local_server(),this.startStatusPolling()}catch(e){throw console.error("[LocalServerManager] Failed to start server:",e),Error("Failed to start server: ".concat(e))}}async stopServer(){if(!this.isPyWebViewAvailable())throw Error("PyWebView API not available");try{console.log("[LocalServerManager] Stopping local server..."),window.pywebview.api.stop_local_server(),this.stopStatusPolling()}catch(e){throw console.error("[LocalServerManager] Failed to stop server:",e),Error("Failed to stop server: ".concat(e))}}getServerUrl(){return"http://localhost:8000"}async cancelSetup(){console.log("[LocalServerManager] Setup cancellation requested")}async downloadAndInstall(){return this.setupLocalServer()}isPyWebViewAvailable(){var e;return!!(null===(e=window.pywebview)||void 0===e?void 0:e.api)}startStatusPolling(){this.stopStatusPolling(),this.pollInterval=setInterval(async()=>{try{await this.getServerInfo()}catch(e){console.warn("[LocalServerManager] Status poll failed:",e)}},3e3)}stopStatusPolling(){this.pollInterval&&(clearInterval(this.pollInterval),this.pollInterval=void 0)}static async create(e,t){return r.getInstance()}constructor(){window.dispatchLocalServerProgress=e=>{var t;console.log("[LocalServerManager] Received progress from Python:",e),null===(t=this.progressCallback)||void 0===t||t.call(this,e)}}}},9782:function(e,t,i){i.d(t,{RunPodManager:function(){return n}});class r{async graphqlRequest(e,t){let i=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.apiKey)},body:JSON.stringify({query:e,variables:t})});if(!i.ok)throw Error("RunPod API error: ".concat(i.statusText));let r=await i.json();if(r.errors)throw Error("RunPod GraphQL error: ".concat(r.errors[0].message));return r.data}async validateApiKey(){try{return await this.graphqlRequest("\n        query {\n          myself {\n            id\n            email\n            credits\n          }\n        }\n      "),!0}catch(e){return console.error("[v0] RunPod API key validation failed:",e),!1}}async getGpuTypes(){return(await this.graphqlRequest("\n      query {\n        gpuTypes {\n          id\n          displayName\n          memoryInGb\n          secureCloud\n          communityCloud\n          lowestPrice(input: { gpuCount: 1 }) {\n            minimumBidPrice\n            uninterruptablePrice\n          }\n          stockStatus\n        }\n      }\n    ")).gpuTypes}async createPod(e){let t={input:{cloudType:"SECURE",gpuCount:1,volumeInGb:e.volumeInGb,containerDiskInGb:e.containerDiskInGb,minVcpuCount:4,minMemoryInGb:16,gpuTypeId:e.gpuTypeId,name:e.name,imageName:e.imageName,dockerArgs:"",ports:e.ports,volumeMountPath:"/workspace",env:e.env}};return(await this.graphqlRequest("\n      mutation createPod($input: PodFindAndDeployOnDemandInput!) {\n        podFindAndDeployOnDemand(input: $input) {\n          id\n          name\n          runtime {\n            uptimeInSeconds\n            ports {\n              ip\n              isIpPublic\n              privatePort\n              publicPort\n              type\n            }\n            gpus {\n              id\n              gpuUtilPercent\n              memoryUtilPercent\n            }\n          }\n          machine {\n            podHostId\n          }\n        }\n      }\n    ",t)).podFindAndDeployOnDemand}async getPod(e){return(await this.graphqlRequest("\n      query getPod($input: PodInput!) {\n        pod(input: $input) {\n          id\n          name\n          runtime {\n            uptimeInSeconds\n            ports {\n              ip\n              isIpPublic\n              privatePort\n              publicPort\n              type\n            }\n            gpus {\n              id\n              gpuUtilPercent\n              memoryUtilPercent\n            }\n          }\n          machine {\n            podHostId\n          }\n        }\n      }\n    ",{input:{podId:e}})).pod}async terminatePod(e){return(await this.graphqlRequest("\n      mutation terminatePod($input: PodTerminateInput!) {\n        podTerminate(input: $input) {\n          id\n        }\n      }\n    ",{input:{podId:e}})).podTerminate}async stopPod(e){return(await this.graphqlRequest("\n      mutation stopPod($input: PodStopInput!) {\n        podStop(input: $input) {\n          id\n        }\n      }\n    ",{input:{podId:e}})).podStop}async resumePod(e){return(await this.graphqlRequest("\n      mutation resumePod($input: PodResumeInput!) {\n        podResume(input: $input) {\n          id\n        }\n      }\n    ",{input:{podId:e}})).podResume}async getMyPods(){return(await this.graphqlRequest("\n      query getMyPods {\n        myself {\n          pods {\n            id\n            name\n            runtime {\n              uptimeInSeconds\n              ports {\n                ip\n                isIpPublic\n                privatePort\n                publicPort\n                type\n              }\n            }\n            machine {\n              podHostId\n            }\n          }\n        }\n      }\n    ")).myself.pods}constructor(e){this.baseUrl="https://api.runpod.ai/graphql",this.apiKey=e}}let a={dockerImage:"your-org/tts-server:latest"};class n{async withRetry(e){let t;for(let i=1;i<=n.MAX_RETRIES;i++)try{return await e()}catch(e){t=e,i<n.MAX_RETRIES&&(console.warn("Attempt ".concat(i," failed, retrying in ").concat(n.RETRY_DELAY,"ms:"),e),await new Promise(e=>setTimeout(e,n.RETRY_DELAY*i)))}throw t}async ensureGpuTypesLoaded(){if(!(this.gpuTypeMap.size>0))for(let e of(await this.api.getGpuTypes()))this.gpuTypeMap.set(e.id,e)}setProgressCallback(e){this.progressCallback=e}updateProgress(e){var t;console.log("[v0] RunPod deployment progress:",e),null===(t=this.progressCallback)||void 0===t||t.call(this,e)}async validateApiKey(){return await this.withRetry(async()=>await this.api.validateApiKey())}async getAvailableGPUs(){return(await this.api.getGpuTypes()).filter(e=>e.memoryInGb>=24&&e.secureCloud&&"OUT_OF_STOCK"!==e.stockStatus).sort((e,t)=>{var i,r;return((null===(i=e.lowestPrice)||void 0===i?void 0:i.uninterruptablePrice)||1/0)-((null===(r=t.lowestPrice)||void 0===r?void 0:r.uninterruptablePrice)||1/0)})}selectOptimalGPU(e){return e.reduce((e,t)=>{let i=this.calculateGPUScore(e);return this.calculateGPUScore(t)>i?t:e},e[0])}calculateGPUScore(e){var t;let i=e.memoryInGb/24;return 1/((null===(t=e.lowestPrice)||void 0===t?void 0:t.uninterruptablePrice)||1)*i*("HIGH"===e.stockStatus?1.2:"MEDIUM"===e.stockStatus?1:.8)}async deployTTSServer(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"tts-server";return this.withRetry(async()=>{try{if(this.updateProgress({stage:"validating",progress:10,message:"Validating API key and credits..."}),!await this.validateApiKey())throw Error("Invalid RunPod API key or insufficient credits");this.updateProgress({stage:"validating",progress:20,message:"Finding available GPUs..."});let t=await this.getAvailableGPUs();if(0===t.length)throw Error("No suitable GPU types available (24GB+ VRAM required)");let i=this.selectOptimalGPU(t);this.updateProgress({stage:"creating",progress:40,message:"Deploying on ".concat(i.displayName,"...")});let r=await this.api.createPod({name:e,imageName:a.dockerImage,gpuTypeId:i.id,containerDiskInGb:50,volumeInGb:100,ports:"8000/http",env:[{key:"PYTHONUNBUFFERED",value:"1"},{key:"TTS_SERVER_PORT",value:"8000"},{key:"TTS_SERVER_HOST",value:"0.0.0.0"},{key:"TTS_SERVER_WORKERS",value:"2"},{key:"CUDA_VISIBLE_DEVICES",value:"0"}]}),n=await this.waitForServerReady(r.id);return this.updateProgress({stage:"ready",progress:100,message:"Server is ready and responding!",podId:r.id}),{podId:r.id,url:n}}catch(e){throw this.updateProgress({stage:"error",progress:0,message:"Deployment failed",error:e instanceof Error?e.message:"Unknown error"}),e}})}async waitForServerReady(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3e5,i=Date.now(),r=0;for(;Date.now()-i<t;){r++;try{let t=await this.getTTSServerUrl(e);if(t&&await this.testServerHealthWithRetry(t))return t}catch(e){console.warn("Health check attempt ".concat(r," failed:"),e)}let t=Math.min(60+2*r,95);this.updateProgress({stage:"starting",progress:t,message:"Waiting for server to be ready... (".concat(r,"/60)"),podId:e}),await new Promise(e=>setTimeout(e,5e3))}throw Error("Server failed to become ready within timeout period")}async testServerHealthWithRetry(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;for(let i=0;i<t;i++)try{let t=await fetch("".concat(e,"/health"),{method:"GET",timeout:1e4,headers:{Accept:"application/json"}});if(t.ok){let e=await t.json();return"healthy"===e.status||!0===e.model_loaded}}catch(e){if(i===t-1)throw e;await new Promise(e=>setTimeout(e,2e3))}return!1}async getTTSServerUrl(e){var t;let i=await this.api.getPod(e);if(!(null===(t=i.runtime)||void 0===t?void 0:t.ports))return null;let r=i.runtime.ports.find(e=>8e3===e.privatePort&&e.isIpPublic);return r?"https://".concat(r.ip,":").concat(r.publicPort):null}async getInstanceInfo(e){try{var t,i,r,a,n;await this.ensureGpuTypesLoaded();let o=await this.api.getPod(e);if(!o)return null;let s=o.gpuTypeId||"fallback-id",l=this.gpuTypeMap.get(s)||{displayName:"Unknown",memoryInGb:24},c=null===(i=o.runtime)||void 0===i?void 0:null===(t=i.ports)||void 0===t?void 0:t.find(e=>8e3===e.privatePort);return{id:o.id,name:o.name,status:o.runtime?"RUNNING":"STOPPED",gpuType:l.displayName,vramGB:l.memoryInGb,publicIp:null==c?void 0:c.ip,ports:(null===(a=o.runtime)||void 0===a?void 0:null===(r=a.ports)||void 0===r?void 0:r.map(e=>({internal:e.privatePort,external:e.publicPort})))||[],createdAt:o.createdAt||new Date().toISOString(),uptime:null===(n=o.runtime)||void 0===n?void 0:n.uptimeInSeconds,costPerHour:o.costPerHour}}catch(e){return console.error("[v0] Failed to get instance info:",e),null}}async stopInstance(e){await this.api.stopPod(e)}async resumeInstance(e){await this.api.resumePod(e)}async terminateInstance(e){await this.api.terminatePod(e)}async listMyInstances(){try{return await this.ensureGpuTypesLoaded(),(await this.api.getMyPods()).map(e=>{var t,i,r,a,n,o;let s=e.gpuTypeId||"fallback-id",l=this.gpuTypeMap.get(s)||{displayName:"Unknown",memoryInGb:24};return{id:e.id,name:e.name,status:e.runtime?"RUNNING":"STOPPED",gpuType:l.displayName,vramGB:l.memoryInGb,publicIp:null===(r=e.runtime)||void 0===r?void 0:null===(i=r.ports)||void 0===i?void 0:null===(t=i[0])||void 0===t?void 0:t.ip,ports:(null===(n=e.runtime)||void 0===n?void 0:null===(a=n.ports)||void 0===a?void 0:a.map(e=>({internal:e.privatePort,external:e.publicPort})))||[],createdAt:e.createdAt||new Date().toISOString(),uptime:null===(o=e.runtime)||void 0===o?void 0:o.uptimeInSeconds,costPerHour:e.costPerHour}})}catch(e){return console.error("[v0] Failed to list instances:",e),[]}}constructor(e){this.gpuTypeMap=new Map,this.api=new r(e)}}n.MAX_RETRIES=3,n.RETRY_DELAY=2e3},2097:function(e,t,i){i.d(t,{m:function(){return m}});var r=i(3011),a=i(105),n=i(7921),o=i(9782),s=i(2682),l=i(4501);let c={virtualMics:[],selectedVirtualMic:null,isVirtualAudioSupported:"AudioContext"in window,virtualAudioPermissionGranted:!1,isStreamingActive:!1,streamingAudioId:null,virtualAudioInitialized:!1,isPyWebViewStreaming:!1,streamingMode:null},d=async e=>{let t=e.mainAudio?new Blob([await e.mainAudio.arrayBuffer()]):null,i=await Promise.all(e.emotions.map(async e=>({id:e.id,name:e.name,audioBlob:e.audioFile?new Blob([await e.audioFile.arrayBuffer()]):null})));return{id:e.id,name:e.name,mainAudioBlob:t,emotions:i,createdAt:e.createdAt}},u=e=>({id:e.id,name:e.name,mainAudio:null,mainAudioUrl:e.mainAudioBlob?a.C.createObjectURL(e.mainAudioBlob):null,emotions:e.emotions.map(e=>({id:e.id,name:e.name,audioFile:null,audioUrl:e.audioBlob?a.C.createObjectURL(e.audioBlob):null})),createdAt:e.createdAt}),p=e=>({hasGPU:e.hasGPU,vramGB:e.totalVRAM,os:e.os,arch:e.arch,isChecking:!1,gpus:e.gpus,totalVRAM:e.totalVRAM,recommendedSetup:e.recommendedSetup,detectionTimestamp:new Date}),m=(0,r.U)((e,t)=>({voices:[],generatedAudios:[],currentText:"",selectedVoiceId:null,selectedEmotionId:null,isProcessing:!1,isLoading:!0,serverConfig:null,hardwareInfo:p(l.hy),isServerSetupComplete:!1,serverSetupStep:"hardware-check",...c,initializeStore:async()=>{try{let i;await a.C.init();let r=(await a.C.getAllVoices()).map(u),n=(await a.C.getAllGeneratedAudios()).map(e=>({id:e.id,text:e.text,voiceId:e.voiceId,emotionId:e.emotionId,audioUrl:a.C.createObjectURL(e.audioBlob),createdAt:e.createdAt})),o=await a.C.getSetting("currentText")||"",s=await a.C.getSetting("selectedVoiceId"),l=await a.C.getSetting("selectedEmotionId"),c=await a.C.getSetting("selectedVirtualMic"),d=await a.C.getSetting("virtualAudioPermissionGranted")==="true",p=await a.C.getSetting("serverConfig"),m=p?JSON.parse(p):null,v=await a.C.getSetting("hardwareInfo");v?i=JSON.parse(v):(await t().checkHardware(),i=t().hardwareInfo);let h=!!m&&"online"===m.status;e({voices:r,generatedAudios:n,currentText:o,selectedVoiceId:s,selectedEmotionId:l,selectedVirtualMic:c,virtualAudioPermissionGranted:d,serverConfig:m,hardwareInfo:i,isServerSetupComplete:h,serverSetupStep:h?"complete":"hardware-check",isLoading:!1}),await t().initializeVirtualAudio()}catch(t){console.error("Failed to initialize store:",t),e({isLoading:!1})}},addVoice:async t=>{let i={...t,id:crypto.randomUUID(),createdAt:new Date};try{let t=await d(i);await a.C.saveVoice(t),e(e=>({voices:[...e.voices,i]}))}catch(e){throw console.error("Failed to save voice:",e),e}},updateVoice:async(i,r)=>{let n=t(),o=n.voices.findIndex(e=>e.id===i);if(-1===o)return;let s={...n.voices[o],...r};try{let t=await d(s);await a.C.saveVoice(t),e(e=>({voices:e.voices.map(e=>e.id===i?s:e)}))}catch(e){throw console.error("Failed to update voice:",e),e}},deleteVoice:async i=>{try{await a.C.deleteVoice(i),e(e=>({voices:e.voices.filter(e=>e.id!==i),selectedVoiceId:e.selectedVoiceId===i?null:e.selectedVoiceId,selectedEmotionId:e.selectedVoiceId===i?null:e.selectedEmotionId}));let r=t();null===r.selectedVoiceId&&(await a.C.saveSetting("selectedVoiceId",null),await a.C.saveSetting("selectedEmotionId",null))}catch(e){throw console.error("Failed to delete voice:",e),e}},addEmotionToVoice:async(i,r)=>{let n={...r,id:crypto.randomUUID()},o=t().voices.find(e=>e.id===i);if(!o)return;let s={...o,emotions:[...o.emotions,n]};try{let t=await d(s);await a.C.saveVoice(t),e(e=>({voices:e.voices.map(e=>e.id===i?s:e)}))}catch(e){throw console.error("Failed to add emotion:",e),e}},removeEmotionFromVoice:async(i,r)=>{let n=t().voices.find(e=>e.id===i);if(!n)return;let o={...n,emotions:n.emotions.filter(e=>e.id!==r)};try{let n=await d(o);await a.C.saveVoice(n),e(e=>({voices:e.voices.map(e=>e.id===i?o:e),selectedEmotionId:e.selectedEmotionId===r?null:e.selectedEmotionId})),null===t().selectedEmotionId&&await a.C.saveSetting("selectedEmotionId",null)}catch(e){throw console.error("Failed to remove emotion:",e),e}},setText:t=>{e({currentText:t}),a.C.saveSetting("currentText",t).catch(console.error)},setSelectedVoice:t=>{e({selectedVoiceId:t,selectedEmotionId:null}),a.C.saveSetting("selectedVoiceId",t).catch(console.error),a.C.saveSetting("selectedEmotionId",null).catch(console.error)},setSelectedEmotion:t=>{e({selectedEmotionId:t}),a.C.saveSetting("selectedEmotionId",t).catch(console.error)},setProcessing:t=>e({isProcessing:t}),addGeneratedAudio:async(t,i)=>{try{let r={id:t.id,text:t.text,voiceId:t.voiceId,emotionId:t.emotionId,audioBlob:i,createdAt:t.createdAt};await a.C.saveGeneratedAudio(r),e(e=>({generatedAudios:[...e.generatedAudios,t]}))}catch(e){throw console.error("Failed to save generated audio:",e),e}},removeGeneratedAudio:async i=>{try{t().streamingAudioId===i&&await t().stopAudioStreaming(),await a.C.deleteGeneratedAudio(i),e(e=>({generatedAudios:e.generatedAudios.filter(e=>e.id!==i)}))}catch(e){throw console.error("Failed to delete generated audio:",e),e}},initializeVirtualAudio:async()=>{if(!t().virtualAudioInitialized)try{window.pywebview?await t().initializePyWebViewStreaming():t().checkVirtualAudioSupport()&&await t().refreshVirtualMics(),e({virtualAudioInitialized:!0})}catch(t){console.error("Failed to initialize virtual audio:",t),e({virtualAudioInitialized:!0})}},refreshVirtualMics:async()=>{try{if(window.pywebview)await t().refreshPyWebViewVirtualMics();else{let t=await n.L.getAvailableVirtualMics();e({virtualMics:t.map(e=>({id:e.id,name:e.name,channels:2,sample_rate:48e3,device_index:void 0})),streamingMode:"browser"})}let i=t();i.selectedVirtualMic&&!i.virtualMics.find(e=>e.id.toString()===i.selectedVirtualMic)&&(e({selectedVirtualMic:null}),await a.C.saveSetting("selectedVirtualMic",null))}catch(t){console.error("Failed to refresh virtual mics:",t),e({virtualMics:[]})}},initializePyWebViewStreaming:async()=>{if(window.pywebview)try{e({streamingMode:"pywebview"}),await t().refreshPyWebViewVirtualMics()}catch(e){console.error("Failed to initialize PyWebView streaming:",e)}},refreshPyWebViewVirtualMics:async()=>{if(window.pywebview)try{let t=await window.pywebview.api.get_virtual_microphones();if(t.success){let i=t.virtual_mics.map(e=>({id:e.id,name:e.name,channels:e.channels||2,sample_rate:e.sample_rate||48e3,device_index:e.device_index}));e({virtualMics:i,streamingMode:"pywebview",isVirtualAudioSupported:i.length>0})}else console.error("Failed to get PyWebView virtual mics:",t.error),e({virtualMics:[]})}catch(t){console.error("Error refreshing PyWebView virtual mics:",t),e({virtualMics:[]})}},startPyWebViewStreaming:async(i,r,a)=>{if(!window.pywebview)throw Error("PyWebView streaming only available in desktop app");try{let n=t(),o=n.serverConfig;if(!o)throw Error("Server configuration not found");let s=await r.arrayBuffer(),l=new Uint8Array(s),c=btoa(String.fromCharCode(...l)),d=n.virtualMics.find(e=>e.id.toString()===a),u=await window.pywebview.api.start_tts_streaming({text:i,voice_blob_data:c,server_url:o.url,virtual_mic_id:a,virtual_mic_index:(null==d?void 0:d.device_index)||0});if(u.success)return e({isPyWebViewStreaming:!0,isStreamingActive:!0,streamingAudioId:"pywebview-".concat(Date.now())}),!0;throw Error(u.error||"Failed to start PyWebView streaming")}catch(e){throw console.error("PyWebView streaming failed:",e),e}},stopPyWebViewStreaming:async()=>{if(window.pywebview)try{await window.pywebview.api.stop_tts_streaming(),e({isPyWebViewStreaming:!1,isStreamingActive:!1,streamingAudioId:null})}catch(t){console.error("Failed to stop PyWebView streaming:",t),e({isPyWebViewStreaming:!1,isStreamingActive:!1,streamingAudioId:null})}},getPyWebViewStreamingStatus:async()=>{if(!window.pywebview)return{streaming_active:!1};try{return await window.pywebview.api.get_streaming_status()}catch(e){return console.error("Failed to get PyWebView streaming status:",e),{streaming_active:!1}}},setSelectedVirtualMic:t=>{e({selectedVirtualMic:t}),a.C.saveSetting("selectedVirtualMic",t).catch(console.error)},setVirtualAudioPermission:i=>{e({virtualAudioPermissionGranted:i}),a.C.saveSetting("virtualAudioPermissionGranted",i.toString()).catch(console.error),i&&t().refreshVirtualMics().catch(console.error)},checkVirtualAudioSupport:()=>{let t="AudioContext"in window&&"mediaDevices"in navigator&&"enumerateDevices"in navigator.mediaDevices;return e({isVirtualAudioSupported:t}),t},startAudioStreaming:async(i,r)=>{let a=t();if(!a.selectedVirtualMic)return!1;try{if("pywebview"===a.streamingMode){if(!r)return!1;console.log("PyWebView streaming of existing audio not yet implemented")}else{if(!r||!a.virtualAudioPermissionGranted)return!1;a.isStreamingActive&&await t().stopAudioStreaming();let s=await n.L.startStreaming(r);if(s){let t=a.virtualMics.find(e=>e.id.toString()===a.selectedVirtualMic);if(t){var o;await n.L.routeToVirtualMicrophone((null===(o=t.deviceId)||void 0===o?void 0:o.toString())||t.id.toString(),s)}return e({isStreamingActive:!0,streamingAudioId:i}),!0}}}catch(e){console.error("Failed to start audio streaming:",e)}return!1},stopAudioStreaming:async()=>{let i=t();try{"pywebview"===i.streamingMode&&i.isPyWebViewStreaming?await t().stopPyWebViewStreaming():(await n.L.stopStreaming(),e({isStreamingActive:!1,streamingAudioId:null}))}catch(e){console.error("Failed to stop audio streaming:",e)}},setStreamingStatus:function(t){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;e({isStreamingActive:t,streamingAudioId:i})},getStreamingStatus:()=>{let e=t();return{isActive:e.isStreamingActive,audioId:e.streamingAudioId}},checkHardware:async()=>{e(e=>({hardwareInfo:{...e.hardwareInfo,isChecking:!0}}));try{let t=await (0,l.qE)(),i=p(t);e({hardwareInfo:i}),"local"===t.recommendedSetup?e({serverSetupStep:"server-download"}):"remote"===t.recommendedSetup?e({serverSetupStep:"url-input"}):e({serverSetupStep:"runpod-deploy"}),await a.C.saveSetting("hardwareInfo",JSON.stringify(i))}catch(t){console.error("Hardware check failed:",t),e({hardwareInfo:{hasGPU:!1,vramGB:0,os:"linux",arch:"x64",isChecking:!1,gpus:[],totalVRAM:0,recommendedSetup:"runpod",detectionTimestamp:new Date},serverSetupStep:"runpod-deploy"})}},setServerConfig:async t=>{e({serverConfig:t}),await a.C.saveSetting("serverConfig",JSON.stringify(t))},checkServerHealth:async()=>{let{serverConfig:i}=t();if(!i)return!1;try{let t=(await fetch("".concat(i.url,"/health"),{method:"GET",timeout:5e3})).ok,r={...i,status:t?"online":"offline",lastChecked:new Date};return e({serverConfig:r}),await a.C.saveSetting("serverConfig",JSON.stringify(r)),t}catch(r){let t={...i,status:"offline",lastChecked:new Date};return e({serverConfig:t}),await a.C.saveSetting("serverConfig",JSON.stringify(t)),!1}},downloadAndStartServer:async i=>{let{hardwareInfo:r}=t();if(!r)throw Error("Hardware info not available");if(!await (0,l.Vt)())throw Error("Cannot setup local server in web environment");e({serverSetupStep:"server-start"});try{let r=s.Yg.getInstance();i&&r.setProgressCallback(i),await r.setupLocalServer();let a={type:"local",url:r.getServerUrl(),status:"checking"};if(await t().setServerConfig(a),await t().checkServerHealth())e({isServerSetupComplete:!0,serverSetupStep:"complete"});else throw Error("Server failed to start properly")}catch(t){throw console.error("Server setup failed:",t),e({serverSetupStep:"url-input"}),t}},deployToRunPod:async(i,r)=>{e({serverSetupStep:"runpod-deploy"});try{var a,n;let s=new o.RunPodManager(i);r&&s.setProgressCallback(r);let c=await s.deployTTSServer("tts-server-"+Date.now());await (0,l.Vt)()&&(null===(n=window.pywebview)||void 0===n?void 0:null===(a=n.api)||void 0===a?void 0:a.set_active_runpod_instance)&&await window.pywebview.api.set_active_runpod_instance(i,c.podId);let d={type:"runpod",url:c.url,status:"checking"};if(await t().setServerConfig(d),await t().checkServerHealth())e({isServerSetupComplete:!0,serverSetupStep:"complete"});else throw Error("RunPod deployment failed to become healthy")}catch(t){throw console.error("RunPod deployment failed:",t),e({serverSetupStep:"url-input"}),t}},getVoiceSampleBlob:async(e,t)=>{let i=await a.C.getVoice(e);if(!i)return null;if(t){let e=i.emotions.find(e=>e.id===t);return(null==e?void 0:e.audioBlob)||null}return i.mainAudioBlob},setServerSetupStep:t=>e({serverSetupStep:t})}))},7921:function(e,t,i){i.d(t,{L:function(){return a}});class r{async initializeAudioContext(){try{this.audioContext=new AudioContext}catch(e){console.error("Failed to initialize AudioContext:",e)}}async getAvailableVirtualMics(){try{let e=await navigator.mediaDevices.enumerateDevices(),t=[];return e.forEach(e=>{let i=e.label.toLowerCase(),r=["virtual","vb-audio","voicemeeter","cable","obs","elgato","streamlabs","blackhole","soundflower","jack"].some(e=>i.includes(e));"audiooutput"===e.kind&&(r||e.label.includes("Virtual"))&&t.push({id:e.deviceId,name:e.label||"Virtual Device ".concat(t.length+1),deviceId:e.deviceId,kind:e.kind})}),[{id:"vb-cable",name:"VB-Audio Virtual Cable",deviceId:"vb-cable",kind:"audiooutput"},{id:"voicemeeter",name:"VoiceMeeter Input",deviceId:"voicemeeter",kind:"audiooutput"},{id:"obs-virtual",name:"OBS Virtual Camera Audio",deviceId:"obs-virtual",kind:"audiooutput"}].forEach(e=>{t.find(t=>t.name.toLowerCase().includes(e.name.toLowerCase().split(" ")[0]))||t.push(e)}),t}catch(e){return console.error("Failed to enumerate devices:",e),[]}}async startStreaming(e,t){if(!this.audioContext||this.isStreaming)return null;try{return"suspended"===this.audioContext.state&&await this.audioContext.resume(),this.streamingSource=this.audioContext.createMediaElementSource(e),this.gainNode=this.audioContext.createGain(),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.streamDestination=this.audioContext.createMediaStreamDestination(),this.streamingSource.connect(this.gainNode).connect(this.analyser).connect(this.streamDestination),this.gainNode.connect(this.audioContext.destination),this.mediaStream=this.streamDestination.stream,this.isStreaming=!0,this.mediaStream}catch(e){return console.error("Failed to start streaming:",e),null}}async stopStreaming(){if(this.isStreaming)try{this.streamingSource&&(this.streamingSource.disconnect(),this.streamingSource=null),this.gainNode&&(this.gainNode.disconnect(),this.gainNode=null),this.analyser&&(this.analyser.disconnect(),this.analyser=null),this.streamDestination&&(this.streamDestination.disconnect(),this.streamDestination=null),this.mediaStream&&(this.mediaStream.getTracks().forEach(e=>e.stop()),this.mediaStream=null),this.isStreaming=!1}catch(e){console.error("Failed to stop streaming:",e)}}getVisualizerData(){if(!this.analyser||!this.isStreaming)return Array(32).fill(0);let e=this.analyser.frequencyBinCount,t=new Uint8Array(e);this.analyser.getByteFrequencyData(t);let i=Math.floor(e/32),r=[];for(let a=0;a<32;a++){let n=a*i,o=n+i,s=0;for(let i=n;i<o&&i<e;i++)s+=t[i];let l=s/i;r.push(l)}return r}setVolume(e){this.gainNode&&(this.gainNode.gain.value=Math.max(0,Math.min(1,e)))}getMediaStream(){return this.mediaStream}isCurrentlyStreaming(){return this.isStreaming}async routeToVirtualMicrophone(e,t){try{if("setSinkId"in HTMLAudioElement.prototype){let i=new Audio;if(i.srcObject=t,"setSinkId"in i)return await i.setSinkId(e),console.log("Successfully routed audio to device: ".concat(e)),!0}}catch(e){console.error("Failed to route to virtual microphone:",e)}return console.log("\n      Manual Setup Required:\n      1. Open your virtual audio software (VB-Cable, VoiceMeeter, etc.)\n      2. Set the browser as input source\n      3. Route output to your desired virtual microphone\n      4. Use the virtual microphone in your streaming software\n    "),!1}constructor(){this.audioContext=null,this.streamingSource=null,this.mediaStream=null,this.streamDestination=null,this.gainNode=null,this.analyser=null,this.isStreaming=!1,this.initializeAudioContext()}}let a=new r}}]);